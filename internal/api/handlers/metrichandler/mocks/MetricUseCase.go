// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/VadimOcLock/metrics-service/internal/entity"

	metricusecase "github.com/VadimOcLock/metrics-service/internal/usecase/metricusecase"

	mock "github.com/stretchr/testify/mock"
)

// MetricUseCase is an autogenerated mock type for the MetricUseCase type
type MetricUseCase struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, dto
func (_m *MetricUseCase) Find(ctx context.Context, dto metricusecase.MetricFindDTO) (entity.Metrics, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 entity.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metricusecase.MetricFindDTO) (entity.Metrics, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metricusecase.MetricFindDTO) entity.Metrics); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(entity.Metrics)
	}

	if rf, ok := ret.Get(1).(func(context.Context, metricusecase.MetricFindDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx, _a1
func (_m *MetricUseCase) FindAll(ctx context.Context, _a1 metricusecase.MetricFindAllDTO) (metricusecase.MetricFindAllResp, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 metricusecase.MetricFindAllResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metricusecase.MetricFindAllDTO) (metricusecase.MetricFindAllResp, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metricusecase.MetricFindAllDTO) metricusecase.MetricFindAllResp); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(metricusecase.MetricFindAllResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, metricusecase.MetricFindAllDTO) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, dto
func (_m *MetricUseCase) Update(ctx context.Context, dto metricusecase.MetricUpdateDTO) (entity.Metrics, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metricusecase.MetricUpdateDTO) (entity.Metrics, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metricusecase.MetricUpdateDTO) entity.Metrics); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(entity.Metrics)
	}

	if rf, ok := ret.Get(1).(func(context.Context, metricusecase.MetricUpdateDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMetricUseCase creates a new instance of MetricUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricUseCase {
	mock := &MetricUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
