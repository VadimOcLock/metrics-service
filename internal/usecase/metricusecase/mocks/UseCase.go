// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/VadimOcLock/metrics-service/internal/entity"
	metricusecase "github.com/VadimOcLock/metrics-service/internal/usecase/metricusecase"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, dto
func (_m *UseCase) Find(ctx context.Context, dto metricusecase.FindDTO) (metricusecase.FindResp, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 metricusecase.FindResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metricusecase.FindDTO) (metricusecase.FindResp, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metricusecase.FindDTO) metricusecase.FindResp); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(metricusecase.FindResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, metricusecase.FindDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx, dto
func (_m *UseCase) FindAll(ctx context.Context, dto metricusecase.FindAllDTO) (metricusecase.FindAllResp, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 metricusecase.FindAllResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metricusecase.FindAllDTO) (metricusecase.FindAllResp, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metricusecase.FindAllDTO) metricusecase.FindAllResp); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(metricusecase.FindAllResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, metricusecase.FindAllDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, dto
func (_m *UseCase) Update(ctx context.Context, dto entity.MetricDTO) (metricusecase.UpdateResp, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 metricusecase.UpdateResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.MetricDTO) (metricusecase.UpdateResp, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.MetricDTO) metricusecase.UpdateResp); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(metricusecase.UpdateResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.MetricDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
